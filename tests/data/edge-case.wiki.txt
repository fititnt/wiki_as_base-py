
==== Elements ====

From https://wiki.openstreetmap.org/wiki/Elements

{| class="wikitable"
|-
! scope="col" |Name
! scope="col" |Value
! scope="col" | Description
|- id="id"
|<tt>id</tt>
|integer ([[{{LL|64-bit Identifiers}}|64-bit]]) 
|Used for identifying the element. Element types have their own ID space, so there could be a node with id=100 and a way with id=100, which are unlikely to be related or geographically near to each other.<br /> Positive (>0) values are used for all existing elements (and will remain assigned when they are modified or deleted); negative values (<0) are reserved (their scope limited to the current changeset and never stored in the database) and only used when sending data to the OSM database for identifying new objects to create and reference them in other created or modified objects (the server will replace these temporary identifiers sent by the editing application, by assigning an actual positive identifier for each created object, and will return a mapping from the negative identifiers used to their assigned positive identifiers).
|-
|<tt>user</tt>
|character string
|The display name of the user who last modified the object (informative only and may be empty). A user can change their display name at any time (existing elements will reflect the new user name without needing any version change).
|-
|<tt>uid</tt>
|integer
|The numeric identifier of the user who last modified the object. An user identifier never changes.
|-
|<tt>timestamp</tt>
|[https://www.w3.org/TR/NOTE-datetime W3C standard date and time formats]. 
|Time of the last modification (e.g. "2016-12-31T23:59:59.999Z").
|-
|<tt>visible</tt>
|"<tt>true</tt>" or "<tt>false</tt>"
|Whether the object is deleted or not in the database, if visible="false" then the object should only be returned by history calls.
|-
|<tt>version</tt>
|integer
| The edit version of the object. Newly created objects start at version 1 and the value is incremented by the server when a client uploads a new version of the object. The server will reject a new version of an object if the version sent by the client does not match the current version of the object in the database. 
|-
|<tt>changeset</tt>
|integer
|The [[changeset]] number in which the object was created or updated (supporting [[{{LL|64-bit Identifiers}}|64-bit]] is recommended in applications for compatibility with long term evolution of the OSM database, but applications that only query data without updating them may ignore this informative attribute).
|}


===Example OSM XML file===
From https://wiki.openstreetmap.org/wiki/OSM_XML

<source lang=xml>
<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="CGImap 0.0.2">
 <bounds minlat="54.0889580" minlon="12.2487570" maxlat="54.0913900" maxlon="12.2524800"/>
 <node id="298884269" lat="54.0901746" lon="12.2482632" user="SvenHRO" uid="46882" visible="true" version="1" changeset="676636" timestamp="2008-09-21T21:37:45Z"/>
 <node id="261728686" lat="54.0906309" lon="12.2441924" user="PikoWinter" uid="36744" visible="true" version="1" changeset="323878" timestamp="2008-05-03T13:39:23Z"/>
 <node id="1831881213" version="1" changeset="12370172" lat="54.0900666" lon="12.2539381" user="lafkor" uid="75625" visible="true" timestamp="2012-07-20T09:43:19Z">
  <tag k="name" v="Neu Broderstorf"/>
  <tag k="traffic_sign" v="city_limit"/>
 </node>
 <!-- ... -->
 <node id="298884272" lat="54.0901447" lon="12.2516513" user="SvenHRO" uid="46882" visible="true" version="1" changeset="676636" timestamp="2008-09-21T21:37:45Z"/>
 <way id="26659127" user="Masch" uid="55988" visible="true" version="5" changeset="4142606" timestamp="2010-03-16T11:47:08Z">
  <nd ref="292403538"/>
  <nd ref="298884289"/>
  <!-- ... -->
  <nd ref="261728686"/>
  <tag k="highway" v="unclassified"/>
  <tag k="name" v="Pastower Straße"/>
 </way>
 <relation id="56688" user="kmvar" uid="56190" visible="true" version="28" changeset="6947637" timestamp="2011-01-12T14:23:49Z">
  <member type="node" ref="294942404" role=""/>
  <!-- ... -->
  <member type="node" ref="364933006" role=""/>
  <member type="way" ref="4579143" role=""/>
  ...
  <member type="node" ref="249673494" role=""/>
  <tag k="name" v="Küstenbus Linie 123"/>
  <tag k="network" v="VVW"/>
  <tag k="operator" v="Regionalverkehr Küste"/>
  <tag k="ref" v="123"/>
  <tag k="route" v="bus"/>
  <tag k="type" v="route"/>
 </relation>
 <!-- ... -->
</osm>
</source>

=== Hello (OSM SPARQL) World ===

See [[Elements]] for details of the object categories.<br>
See [[Map features]] about how real world objects are modeled and categorized.

From https://wiki.openstreetmap.org/wiki/Sophox

{{SPARQL|query=# A sample query to list all OSM objects with a place tag.
# The * will show all variables that are used in the WHERE clause
select * where {
  # The first expression matches the three columns of the Triple Store with:
  #   "find any subject that has an OSM 'place' tag, and any value of that tag"
  #
  # Question mark represents a variable. ?osm becomes a URI for an OSM object, e.g.
  #    <https://www.openstreetmap.org/node/2681940767>  (Everest)
  # The same URI may also be written with a prefix - osmnode:2681940767
  # All OSM tags use osmt: prefix. Using osmt:place constant only
  # matches OSM object with a place tag. The ?place variable will
  # become the value of the place tag. You can use a constant instead of a variable,
  # e.g. substitute ?place with a constant string 'city'.

  ?osm osmt:place ?place.

  # osmm: prefix means "meta values", e.g. OSM object type, location (loc), version, ...
  # Uncomment to limit to a specific type of an OSM object ('n', 'r', 'w').
  #   ?osm osmm:type 'r'.

  # osmm:loc is a centroid point for most OSM objects. If included, the results
  # can be shown on a map by switching to the map view (right under the query)
  #   ?osm osmm:loc ?coordinates.

  # The FILTER expressions allow complex filtering beyond a simple "must match".
  #   filter(?place = 'town' {{!}}{{!}} regex(?place, '[a-z][0-9]', 'i'))

  # This will limit results to places which do not have a `name:en` tag.
  #   filter not exists { ?osm osmt:name:en ?nameen. }

  # For OSM objects with the wikidata tag, find the English name of that object in Wikidata
  # if it exists.
     ?osm osmt:wikidata ?wd.
  # With that get from the Wikidata SPARQL endpoint service what type of the object it
  # is (P31 is the property instance of in Wikidata), and the label for that type,
  # also if exists in English. For labels and descriptions, you may instead use a
  # service that picks first available language based on a list.
  #   service <https://query.wikidata.org/sparql> {
  #     ?wd wdt:P31 ?type.
  #     optional { ?wd rdfs:label ?label. filter(lang(?label) = "en") }
  #     optional { ?type rdfs:label ?typelabel. filter(lang(?typelabel) = "en") }
  #  }
}
# Similar to SQL, queries can use aggregations, subqueries, and limit the results
limit 10}}

=== « n » adjacent ways ===

Example from https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_API_by_Example

Lorem ipsum.

{{OverpassTurboExample|loc=56.07204;9.00398;12|query=
(
  way(111435507);
  complete(4) {{(}}
    way(around:0)[highway~"."][highway!~"path{{!}}track{{!}}cycleway{{!}}footway"];
  {{)}};
);  
out geom;


}}

Dolor semet.

=== Find house numbers without street ===

Example from https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_API_by_Example

<syntaxhighlight lang="bash">
i=42103;
while [[ $i -le 42119 ]];
do {
   wget -O false_$i.osm "http://overpass-api.de/api/interpreter?data=area[postal_code=\"$i\"]->.a;(node(51,7,51.5,7.5)(area.a)[\"addr:postcode\"][\"addr:postcode\"!=\"$i\"];way(51,7,51.5,7.5)(area.a)[\"addr:postcode\"][\"addr:postcode\"!=\"$i\"];>;);out meta;";
   i=$(($i + 1));
};
done
</syntaxhighlight>

=== MapCSS/Examples ===

Example from https://wiki.openstreetmap.org/wiki/MapCSS/Examples

<code>
  canvas {
    background-color: #ffffea;
    default-points: false;
    default-lines: false;
  }
  relation[boundary=administrative][admin_level=7]:closed
  {
    width: 1;
    color: black;
    opacity: 1;
    fill-color: orange;
    fill-opacity: 0.3;
    font-size: 16;
    text-color: green;
    text: admin_level;
    text-position: center;
  }
  relation[boundary=administrative][admin_level=8]:closed
  {
    width: 1;
    color: black;
    opacity: 1;
    fill-color: blue;
    fill-opacity: 0.3;
    font-size: 16;
    text-color: red;
    text: admin_level;
    text-position: center;
  }
  relation[boundary=administrative][admin_level=6]:closed
  {
    width: 1;
    color: black;
    opacity: 1;
    fill-color: brown;
    fill-opacity: 0.3;
    font-size: 16;
    text-color: white;
    text: admin_level;
    text-position: center;
  } 

</code>


=== Overpass_API - Language_Guide - Control output format (print, out) ===

From https://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide

{| class="wikitable"
|-
| XML || QL || Description 
|- 
| &lt;print/&gt; || out;<br>''or''<br>out&nbsp;body; || The normal print mode.
|-
| &lt;print&nbsp;mode="skeleton"&gt; || out&nbsp;skel; || The <em>skeleton</em> print mode is somewhat shorter than the usual print mode: No tags are printed in this mode, only ids, child elements, and coordinates of nodes.
|-
| &lt;print&nbsp;mode="tags"&gt; || out&nbsp;tags; || The <em>tags</em> print mode only print ids and tags for each element, and not coordinates or members.
|-
| &lt;print&nbsp;mode="ids_only"&gt; || out&nbsp;ids; || <em>ids_only</em> is the shortest print mode; only ids are printed. <em>ids_only</em> is shortened to <em>ids</em> in Overpass QL. Note that this doesn't work with [[OpenLayers]] because no coordinates are returned.
|-
| &lt;print&nbsp;mode="meta"&gt; || out&nbsp;meta; || <em>meta</em> is the most complete mode. Beside child elements and tags, also the meta data (timestamp, version, changeset, user name and id) is printed.
|}